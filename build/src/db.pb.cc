// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db.proto

#include "db.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace condenccpp {
PROTOBUF_CONSTEXPR TypoPolicy::TypoPolicy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.edit_cutoff_)*/1
  , /*decltype(_impl_.abs_entcutoff_)*/10
  , /*decltype(_impl_.rel_entcutoff_)*/3
  , /*decltype(_impl_.min_length_)*/6} {}
struct TypoPolicyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TypoPolicyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TypoPolicyDefaultTypeInternal() {}
  union {
    TypoPolicy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TypoPolicyDefaultTypeInternal _TypoPolicy_default_instance_;
PROTOBUF_CONSTEXPR Log::Log(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.localtime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.in_cache_)*/false
  , /*decltype(_impl_.istop5fixable_)*/false
  , /*decltype(_impl_.edit_dist_)*/0
  , /*decltype(_impl_.rel_entropy_)*/0
  , /*decltype(_impl_.pass_complexity_)*/0
  , /*decltype(_impl_.ts_)*/int64_t{0}
  , /*decltype(_impl_.tid_)*/0u} {}
struct LogDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogDefaultTypeInternal() {}
  union {
    Log _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogDefaultTypeInternal _Log_default_instance_;
PROTOBUF_CONSTEXPR ConfigHeader::ConfigHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.install_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.public_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.global_salt_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tp_)*/nullptr
  , /*decltype(_impl_.period_for_sending_log_)*/21600
  , /*decltype(_impl_.allowed_typo_login_)*/true
  , /*decltype(_impl_.expire_typos_)*/true
  , /*decltype(_impl_.allow_upload_)*/true
  , /*decltype(_impl_.typo_expiry_time_)*/int64_t{2592000}} {}
struct ConfigHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigHeaderDefaultTypeInternal() {}
  union {
    ConfigHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigHeaderDefaultTypeInternal _ConfigHeader_default_instance_;
PROTOBUF_CONSTEXPR EncHeaderData::EncHeaderData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.freq_)*/{}
  , /*decltype(_impl_.last_used_)*/{}
  , /*decltype(_impl_.pw_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pw_ent_)*/0} {}
struct EncHeaderDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EncHeaderDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EncHeaderDataDefaultTypeInternal() {}
  union {
    EncHeaderData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EncHeaderDataDefaultTypeInternal _EncHeaderData_default_instance_;
PROTOBUF_CONSTEXPR Header::Header(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.enc_header_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.indexj_)*/0
  , /*decltype(_impl_.last_log_sent_time_)*/0
  , /*decltype(_impl_.login_count_)*/0
  , /*decltype(_impl_.sys_state_)*/3} {}
struct HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderDefaultTypeInternal _Header_default_instance_;
PROTOBUF_CONSTEXPR Logs::Logs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.l_)*/{}
  , /*decltype(_impl_.typos_)*/0
  , /*decltype(_impl_.typos_saved_)*/0} {}
struct LogsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogsDefaultTypeInternal() {}
  union {
    Logs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogsDefaultTypeInternal _Logs_default_instance_;
PROTOBUF_CONSTEXPR typoDB::typoDB(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.w_)*/{}
  , /*decltype(_impl_.t_)*/{}
  , /*decltype(_impl_.rlpwdctxorenc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ch_)*/nullptr
  , /*decltype(_impl_.h_)*/nullptr
  , /*decltype(_impl_.logs_)*/nullptr} {}
struct typoDBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR typoDBDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~typoDBDefaultTypeInternal() {}
  union {
    typoDB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 typoDBDefaultTypeInternal _typoDB_default_instance_;
PROTOBUF_CONSTEXPR WaitlistEntry::WaitlistEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pw_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ts_)*/int64_t{-1}} {}
struct WaitlistEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WaitlistEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WaitlistEntryDefaultTypeInternal() {}
  union {
    WaitlistEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WaitlistEntryDefaultTypeInternal _WaitlistEntry_default_instance_;
PROTOBUF_CONSTEXPR PwdCtxORPredicate::PwdCtxORPredicate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rlpwdctx_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rlpwdctxorenc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rlpwdctxorcenc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct PwdCtxORPredicateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PwdCtxORPredicateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PwdCtxORPredicateDefaultTypeInternal() {}
  union {
    PwdCtxORPredicate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PwdCtxORPredicateDefaultTypeInternal _PwdCtxORPredicate_default_instance_;
PROTOBUF_CONSTEXPR PaillierPK::PaillierPK(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pail_pk_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pail_sk_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct PaillierPKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PaillierPKDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PaillierPKDefaultTypeInternal() {}
  union {
    PaillierPK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PaillierPKDefaultTypeInternal _PaillierPK_default_instance_;
}  // namespace condenccpp
static ::_pb::Metadata file_level_metadata_db_2eproto[10];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_db_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_db_2eproto = nullptr;

const uint32_t TableStruct_db_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::condenccpp::TypoPolicy, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::TypoPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::condenccpp::TypoPolicy, _impl_.edit_cutoff_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::TypoPolicy, _impl_.abs_entcutoff_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::TypoPolicy, _impl_.rel_entcutoff_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::TypoPolicy, _impl_.min_length_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::condenccpp::Log, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::Log, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::condenccpp::Log, _impl_.in_cache_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::Log, _impl_.istop5fixable_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::Log, _impl_.edit_dist_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::Log, _impl_.rel_entropy_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::Log, _impl_.pass_complexity_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::Log, _impl_.tid_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::Log, _impl_.ts_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::Log, _impl_.localtime_),
  1,
  2,
  3,
  4,
  5,
  7,
  6,
  0,
  PROTOBUF_FIELD_OFFSET(::condenccpp::ConfigHeader, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::ConfigHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::condenccpp::ConfigHeader, _impl_.allowed_typo_login_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::ConfigHeader, _impl_.period_for_sending_log_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::ConfigHeader, _impl_.expire_typos_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::ConfigHeader, _impl_.typo_expiry_time_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::ConfigHeader, _impl_.allow_upload_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::ConfigHeader, _impl_.tp_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::ConfigHeader, _impl_.install_id_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::ConfigHeader, _impl_.public_key_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::ConfigHeader, _impl_.global_salt_),
  5,
  4,
  6,
  8,
  7,
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::condenccpp::EncHeaderData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::EncHeaderData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::condenccpp::EncHeaderData, _impl_.pw_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::EncHeaderData, _impl_.freq_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::EncHeaderData, _impl_.last_used_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::EncHeaderData, _impl_.pw_ent_),
  0,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::condenccpp::Header, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::condenccpp::Header, _impl_.indexj_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::Header, _impl_.last_log_sent_time_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::Header, _impl_.login_count_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::Header, _impl_.sys_state_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::Header, _impl_.enc_header_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::condenccpp::Logs, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::Logs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::condenccpp::Logs, _impl_.l_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::Logs, _impl_.typos_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::Logs, _impl_.typos_saved_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::condenccpp::typoDB, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::typoDB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::condenccpp::typoDB, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::typoDB, _impl_.ch_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::typoDB, _impl_.h_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::typoDB, _impl_.w_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::typoDB, _impl_.t_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::typoDB, _impl_.logs_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::typoDB, _impl_.rlpwdctxorenc_),
  1,
  2,
  3,
  ~0u,
  ~0u,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::condenccpp::WaitlistEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::WaitlistEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::condenccpp::WaitlistEntry, _impl_.pw_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::WaitlistEntry, _impl_.ts_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::condenccpp::PwdCtxORPredicate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::PwdCtxORPredicate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::condenccpp::PwdCtxORPredicate, _impl_.rlpwdctx_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::PwdCtxORPredicate, _impl_.rlpwdctxorenc_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::PwdCtxORPredicate, _impl_.rlpwdctxorcenc_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::condenccpp::PaillierPK, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::PaillierPK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::condenccpp::PaillierPK, _impl_.pail_pk_),
  PROTOBUF_FIELD_OFFSET(::condenccpp::PaillierPK, _impl_.pail_sk_),
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::condenccpp::TypoPolicy)},
  { 14, 28, -1, sizeof(::condenccpp::Log)},
  { 36, 51, -1, sizeof(::condenccpp::ConfigHeader)},
  { 60, 70, -1, sizeof(::condenccpp::EncHeaderData)},
  { 74, 85, -1, sizeof(::condenccpp::Header)},
  { 90, 99, -1, sizeof(::condenccpp::Logs)},
  { 102, 115, -1, sizeof(::condenccpp::typoDB)},
  { 122, 130, -1, sizeof(::condenccpp::WaitlistEntry)},
  { 132, 141, -1, sizeof(::condenccpp::PwdCtxORPredicate)},
  { 144, 152, -1, sizeof(::condenccpp::PaillierPK)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::condenccpp::_TypoPolicy_default_instance_._instance,
  &::condenccpp::_Log_default_instance_._instance,
  &::condenccpp::_ConfigHeader_default_instance_._instance,
  &::condenccpp::_EncHeaderData_default_instance_._instance,
  &::condenccpp::_Header_default_instance_._instance,
  &::condenccpp::_Logs_default_instance_._instance,
  &::condenccpp::_typoDB_default_instance_._instance,
  &::condenccpp::_WaitlistEntry_default_instance_._instance,
  &::condenccpp::_PwdCtxORPredicate_default_instance_._instance,
  &::condenccpp::_PaillierPK_default_instance_._instance,
};

const char descriptor_table_protodef_db_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010db.proto\022\ncondenccpp\"p\n\nTypoPolicy\022\026\n\013"
  "edit_cutoff\030\001 \001(\005:\0011\022\031\n\rabs_entcutoff\030\002 "
  "\001(\005:\00210\022\030\n\rrel_entcutoff\030\003 \001(\005:\0013\022\025\n\nmin"
  "_length\030\004 \001(\005:\0016\"\233\001\n\003Log\022\020\n\010in_cache\030\001 \002"
  "(\010\022\025\n\ristop5fixable\030\002 \002(\010\022\021\n\tedit_dist\030\003"
  " \002(\005\022\023\n\013rel_entropy\030\004 \002(\002\022\027\n\017pass_comple"
  "xity\030\005 \002(\002\022\013\n\003tid\030\006 \002(\r\022\n\n\002ts\030\007 \002(\003\022\021\n\tl"
  "ocaltime\030\010 \002(\t\"\223\002\n\014ConfigHeader\022 \n\022allow"
  "ed_typo_login\030\001 \001(\010:\004true\022%\n\026period_for_"
  "sending_log\030\002 \001(\005:\00521600\022\032\n\014expire_typos"
  "\030\003 \001(\010:\004true\022!\n\020typo_expiry_time\030\004 \001(\003:\007"
  "2592000\022\032\n\014allow_upload\030\005 \001(\010:\004true\022\"\n\002t"
  "p\030\006 \001(\0132\026.condenccpp.TypoPolicy\022\022\n\ninsta"
  "ll_id\030\007 \002(\t\022\022\n\npublic_key\030\010 \002(\014\022\023\n\013globa"
  "l_salt\030\t \002(\014\"L\n\rEncHeaderData\022\n\n\002pw\030\001 \002("
  "\014\022\014\n\004freq\030\002 \003(\005\022\021\n\tlast_used\030\003 \003(\003\022\016\n\006pw"
  "_ent\030\004 \002(\002\"\242\001\n\006Header\022\021\n\006indexj\030\001 \001(\005:\0010"
  "\022\035\n\022last_log_sent_time\030\002 \001(\005:\0010\022\026\n\013login"
  "_count\030\003 \001(\005:\0010\022:\n\tsys_state\030\004 \001(\0162\030.con"
  "denccpp.SystemStatus:\rUNINITIALIZED\022\022\n\ne"
  "nc_header\030\005 \002(\014\"L\n\004Logs\022\032\n\001L\030\001 \003(\0132\017.con"
  "denccpp.Log\022\020\n\005typos\030\002 \001(\005:\0010\022\026\n\013typos_s"
  "aved\030\003 \001(\005:\0010\"\256\001\n\006typoDB\022\022\n\007version\030\t \001("
  "\t:\0011\022$\n\002CH\030\001 \002(\0132\030.condenccpp.ConfigHead"
  "er\022\035\n\001H\030\002 \002(\0132\022.condenccpp.Header\022\t\n\001W\030\003"
  " \003(\014\022\t\n\001T\030\004 \003(\014\022\036\n\004logs\030\005 \001(\0132\020.condencc"
  "pp.Logs\022\025\n\rrlpwdctxorenc\030\006 \002(\014\"+\n\rWaitli"
  "stEntry\022\n\n\002pw\030\001 \002(\014\022\016\n\002ts\030\002 \002(\003:\002-1\"T\n\021P"
  "wdCtxORPredicate\022\020\n\010rlpwdctx\030\001 \001(\t\022\025\n\rrl"
  "pwdctxorenc\030\002 \001(\t\022\026\n\016rlpwdctxorcenc\030\003 \001("
  "\t\".\n\nPaillierPK\022\017\n\007Pail_PK\030\001 \001(\014\022\017\n\007Pail"
  "_Sk\030\002 \001(\014*\?\n\014SystemStatus\022\014\n\010ALL_GOOD\020\000\022"
  "\016\n\nPW_CHANGED\020\001\022\021\n\rUNINITIALIZED\020\003"
  ;
static ::_pbi::once_flag descriptor_table_db_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_db_2eproto = {
    false, false, 1314, descriptor_table_protodef_db_2eproto,
    "db.proto",
    &descriptor_table_db_2eproto_once, nullptr, 0, 10,
    schemas, file_default_instances, TableStruct_db_2eproto::offsets,
    file_level_metadata_db_2eproto, file_level_enum_descriptors_db_2eproto,
    file_level_service_descriptors_db_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_db_2eproto_getter() {
  return &descriptor_table_db_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_db_2eproto(&descriptor_table_db_2eproto);
namespace condenccpp {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SystemStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_db_2eproto);
  return file_level_enum_descriptors_db_2eproto[0];
}
bool SystemStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TypoPolicy::_Internal {
 public:
  using HasBits = decltype(std::declval<TypoPolicy>()._impl_._has_bits_);
  static void set_has_edit_cutoff(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_abs_entcutoff(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rel_entcutoff(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_min_length(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

TypoPolicy::TypoPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:condenccpp.TypoPolicy)
}
TypoPolicy::TypoPolicy(const TypoPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TypoPolicy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.edit_cutoff_){}
    , decltype(_impl_.abs_entcutoff_){}
    , decltype(_impl_.rel_entcutoff_){}
    , decltype(_impl_.min_length_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.edit_cutoff_, &from._impl_.edit_cutoff_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.min_length_) -
    reinterpret_cast<char*>(&_impl_.edit_cutoff_)) + sizeof(_impl_.min_length_));
  // @@protoc_insertion_point(copy_constructor:condenccpp.TypoPolicy)
}

inline void TypoPolicy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.edit_cutoff_){1}
    , decltype(_impl_.abs_entcutoff_){10}
    , decltype(_impl_.rel_entcutoff_){3}
    , decltype(_impl_.min_length_){6}
  };
}

TypoPolicy::~TypoPolicy() {
  // @@protoc_insertion_point(destructor:condenccpp.TypoPolicy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TypoPolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TypoPolicy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TypoPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:condenccpp.TypoPolicy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    _impl_.edit_cutoff_ = 1;
    _impl_.abs_entcutoff_ = 10;
    _impl_.rel_entcutoff_ = 3;
    _impl_.min_length_ = 6;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TypoPolicy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 edit_cutoff = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_edit_cutoff(&has_bits);
          _impl_.edit_cutoff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 abs_entcutoff = 2 [default = 10];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_abs_entcutoff(&has_bits);
          _impl_.abs_entcutoff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 rel_entcutoff = 3 [default = 3];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_rel_entcutoff(&has_bits);
          _impl_.rel_entcutoff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 min_length = 4 [default = 6];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_min_length(&has_bits);
          _impl_.min_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TypoPolicy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:condenccpp.TypoPolicy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 edit_cutoff = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_edit_cutoff(), target);
  }

  // optional int32 abs_entcutoff = 2 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_abs_entcutoff(), target);
  }

  // optional int32 rel_entcutoff = 3 [default = 3];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_rel_entcutoff(), target);
  }

  // optional int32 min_length = 4 [default = 6];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_min_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:condenccpp.TypoPolicy)
  return target;
}

size_t TypoPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:condenccpp.TypoPolicy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 edit_cutoff = 1 [default = 1];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_edit_cutoff());
    }

    // optional int32 abs_entcutoff = 2 [default = 10];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_abs_entcutoff());
    }

    // optional int32 rel_entcutoff = 3 [default = 3];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rel_entcutoff());
    }

    // optional int32 min_length = 4 [default = 6];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_min_length());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TypoPolicy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TypoPolicy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TypoPolicy::GetClassData() const { return &_class_data_; }


void TypoPolicy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TypoPolicy*>(&to_msg);
  auto& from = static_cast<const TypoPolicy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:condenccpp.TypoPolicy)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.edit_cutoff_ = from._impl_.edit_cutoff_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.abs_entcutoff_ = from._impl_.abs_entcutoff_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.rel_entcutoff_ = from._impl_.rel_entcutoff_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.min_length_ = from._impl_.min_length_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TypoPolicy::CopyFrom(const TypoPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:condenccpp.TypoPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypoPolicy::IsInitialized() const {
  return true;
}

void TypoPolicy::InternalSwap(TypoPolicy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.edit_cutoff_, other->_impl_.edit_cutoff_);
  swap(_impl_.abs_entcutoff_, other->_impl_.abs_entcutoff_);
  swap(_impl_.rel_entcutoff_, other->_impl_.rel_entcutoff_);
  swap(_impl_.min_length_, other->_impl_.min_length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TypoPolicy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[0]);
}

// ===================================================================

class Log::_Internal {
 public:
  using HasBits = decltype(std::declval<Log>()._impl_._has_bits_);
  static void set_has_in_cache(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_istop5fixable(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_edit_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rel_entropy(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pass_complexity(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_localtime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000ff) ^ 0x000000ff) != 0;
  }
};

Log::Log(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:condenccpp.Log)
}
Log::Log(const Log& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Log* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.localtime_){}
    , decltype(_impl_.in_cache_){}
    , decltype(_impl_.istop5fixable_){}
    , decltype(_impl_.edit_dist_){}
    , decltype(_impl_.rel_entropy_){}
    , decltype(_impl_.pass_complexity_){}
    , decltype(_impl_.ts_){}
    , decltype(_impl_.tid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.localtime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localtime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_localtime()) {
    _this->_impl_.localtime_.Set(from._internal_localtime(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.in_cache_, &from._impl_.in_cache_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tid_) -
    reinterpret_cast<char*>(&_impl_.in_cache_)) + sizeof(_impl_.tid_));
  // @@protoc_insertion_point(copy_constructor:condenccpp.Log)
}

inline void Log::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.localtime_){}
    , decltype(_impl_.in_cache_){false}
    , decltype(_impl_.istop5fixable_){false}
    , decltype(_impl_.edit_dist_){0}
    , decltype(_impl_.rel_entropy_){0}
    , decltype(_impl_.pass_complexity_){0}
    , decltype(_impl_.ts_){int64_t{0}}
    , decltype(_impl_.tid_){0u}
  };
  _impl_.localtime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localtime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Log::~Log() {
  // @@protoc_insertion_point(destructor:condenccpp.Log)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Log::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.localtime_.Destroy();
}

void Log::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Log::Clear() {
// @@protoc_insertion_point(message_clear_start:condenccpp.Log)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.localtime_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.in_cache_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tid_) -
        reinterpret_cast<char*>(&_impl_.in_cache_)) + sizeof(_impl_.tid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Log::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool in_cache = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_in_cache(&has_bits);
          _impl_.in_cache_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool istop5fixable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_istop5fixable(&has_bits);
          _impl_.istop5fixable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 edit_dist = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_edit_dist(&has_bits);
          _impl_.edit_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float rel_entropy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_rel_entropy(&has_bits);
          _impl_.rel_entropy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float pass_complexity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_pass_complexity(&has_bits);
          _impl_.pass_complexity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required uint32 tid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_tid(&has_bits);
          _impl_.tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 ts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_ts(&has_bits);
          _impl_.ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string localtime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_localtime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "condenccpp.Log.localtime");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Log::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:condenccpp.Log)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool in_cache = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_in_cache(), target);
  }

  // required bool istop5fixable = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_istop5fixable(), target);
  }

  // required int32 edit_dist = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_edit_dist(), target);
  }

  // required float rel_entropy = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_rel_entropy(), target);
  }

  // required float pass_complexity = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_pass_complexity(), target);
  }

  // required uint32 tid = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_tid(), target);
  }

  // required int64 ts = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_ts(), target);
  }

  // required string localtime = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_localtime().data(), static_cast<int>(this->_internal_localtime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "condenccpp.Log.localtime");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_localtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:condenccpp.Log)
  return target;
}

size_t Log::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:condenccpp.Log)
  size_t total_size = 0;

  if (_internal_has_localtime()) {
    // required string localtime = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_localtime());
  }

  if (_internal_has_in_cache()) {
    // required bool in_cache = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_istop5fixable()) {
    // required bool istop5fixable = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_edit_dist()) {
    // required int32 edit_dist = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_edit_dist());
  }

  if (_internal_has_rel_entropy()) {
    // required float rel_entropy = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_pass_complexity()) {
    // required float pass_complexity = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_ts()) {
    // required int64 ts = 7;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ts());
  }

  if (_internal_has_tid()) {
    // required uint32 tid = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tid());
  }

  return total_size;
}
size_t Log::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:condenccpp.Log)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required string localtime = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_localtime());

    // required bool in_cache = 1;
    total_size += 1 + 1;

    // required bool istop5fixable = 2;
    total_size += 1 + 1;

    // required int32 edit_dist = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_edit_dist());

    // required float rel_entropy = 4;
    total_size += 1 + 4;

    // required float pass_complexity = 5;
    total_size += 1 + 4;

    // required int64 ts = 7;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ts());

    // required uint32 tid = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Log::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Log::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Log::GetClassData() const { return &_class_data_; }


void Log::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Log*>(&to_msg);
  auto& from = static_cast<const Log&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:condenccpp.Log)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_localtime(from._internal_localtime());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.in_cache_ = from._impl_.in_cache_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.istop5fixable_ = from._impl_.istop5fixable_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.edit_dist_ = from._impl_.edit_dist_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.rel_entropy_ = from._impl_.rel_entropy_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.pass_complexity_ = from._impl_.pass_complexity_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.ts_ = from._impl_.ts_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.tid_ = from._impl_.tid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Log::CopyFrom(const Log& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:condenccpp.Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Log::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Log::InternalSwap(Log* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.localtime_, lhs_arena,
      &other->_impl_.localtime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Log, _impl_.tid_)
      + sizeof(Log::_impl_.tid_)
      - PROTOBUF_FIELD_OFFSET(Log, _impl_.in_cache_)>(
          reinterpret_cast<char*>(&_impl_.in_cache_),
          reinterpret_cast<char*>(&other->_impl_.in_cache_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Log::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[1]);
}

// ===================================================================

class ConfigHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigHeader>()._impl_._has_bits_);
  static void set_has_allowed_typo_login(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_period_for_sending_log(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_expire_typos(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_typo_expiry_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_allow_upload(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::condenccpp::TypoPolicy& tp(const ConfigHeader* msg);
  static void set_has_tp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_install_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_public_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_global_salt(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::condenccpp::TypoPolicy&
ConfigHeader::_Internal::tp(const ConfigHeader* msg) {
  return *msg->_impl_.tp_;
}
ConfigHeader::ConfigHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:condenccpp.ConfigHeader)
}
ConfigHeader::ConfigHeader(const ConfigHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConfigHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.install_id_){}
    , decltype(_impl_.public_key_){}
    , decltype(_impl_.global_salt_){}
    , decltype(_impl_.tp_){nullptr}
    , decltype(_impl_.period_for_sending_log_){}
    , decltype(_impl_.allowed_typo_login_){}
    , decltype(_impl_.expire_typos_){}
    , decltype(_impl_.allow_upload_){}
    , decltype(_impl_.typo_expiry_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.install_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.install_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_install_id()) {
    _this->_impl_.install_id_.Set(from._internal_install_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_public_key()) {
    _this->_impl_.public_key_.Set(from._internal_public_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.global_salt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.global_salt_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_global_salt()) {
    _this->_impl_.global_salt_.Set(from._internal_global_salt(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_tp()) {
    _this->_impl_.tp_ = new ::condenccpp::TypoPolicy(*from._impl_.tp_);
  }
  ::memcpy(&_impl_.period_for_sending_log_, &from._impl_.period_for_sending_log_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.typo_expiry_time_) -
    reinterpret_cast<char*>(&_impl_.period_for_sending_log_)) + sizeof(_impl_.typo_expiry_time_));
  // @@protoc_insertion_point(copy_constructor:condenccpp.ConfigHeader)
}

inline void ConfigHeader::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.install_id_){}
    , decltype(_impl_.public_key_){}
    , decltype(_impl_.global_salt_){}
    , decltype(_impl_.tp_){nullptr}
    , decltype(_impl_.period_for_sending_log_){21600}
    , decltype(_impl_.allowed_typo_login_){true}
    , decltype(_impl_.expire_typos_){true}
    , decltype(_impl_.allow_upload_){true}
    , decltype(_impl_.typo_expiry_time_){int64_t{2592000}}
  };
  _impl_.install_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.install_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.global_salt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.global_salt_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConfigHeader::~ConfigHeader() {
  // @@protoc_insertion_point(destructor:condenccpp.ConfigHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConfigHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.install_id_.Destroy();
  _impl_.public_key_.Destroy();
  _impl_.global_salt_.Destroy();
  if (this != internal_default_instance()) delete _impl_.tp_;
}

void ConfigHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConfigHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:condenccpp.ConfigHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.install_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.public_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.global_salt_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.tp_ != nullptr);
      _impl_.tp_->Clear();
    }
    _impl_.period_for_sending_log_ = 21600;
    _impl_.allowed_typo_login_ = true;
    _impl_.expire_typos_ = true;
    _impl_.allow_upload_ = true;
  }
  _impl_.typo_expiry_time_ = int64_t{2592000};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool allowed_typo_login = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_allowed_typo_login(&has_bits);
          _impl_.allowed_typo_login_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 period_for_sending_log = 2 [default = 21600];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_period_for_sending_log(&has_bits);
          _impl_.period_for_sending_log_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool expire_typos = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_expire_typos(&has_bits);
          _impl_.expire_typos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 typo_expiry_time = 4 [default = 2592000];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_typo_expiry_time(&has_bits);
          _impl_.typo_expiry_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool allow_upload = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_allow_upload(&has_bits);
          _impl_.allow_upload_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .condenccpp.TypoPolicy tp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string install_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_install_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "condenccpp.ConfigHeader.install_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required bytes public_key = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_public_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bytes global_salt = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_global_salt();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:condenccpp.ConfigHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool allowed_typo_login = 1 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_allowed_typo_login(), target);
  }

  // optional int32 period_for_sending_log = 2 [default = 21600];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_period_for_sending_log(), target);
  }

  // optional bool expire_typos = 3 [default = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_expire_typos(), target);
  }

  // optional int64 typo_expiry_time = 4 [default = 2592000];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_typo_expiry_time(), target);
  }

  // optional bool allow_upload = 5 [default = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_allow_upload(), target);
  }

  // optional .condenccpp.TypoPolicy tp = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::tp(this),
        _Internal::tp(this).GetCachedSize(), target, stream);
  }

  // required string install_id = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_install_id().data(), static_cast<int>(this->_internal_install_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "condenccpp.ConfigHeader.install_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_install_id(), target);
  }

  // required bytes public_key = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_public_key(), target);
  }

  // required bytes global_salt = 9;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_global_salt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:condenccpp.ConfigHeader)
  return target;
}

size_t ConfigHeader::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:condenccpp.ConfigHeader)
  size_t total_size = 0;

  if (_internal_has_install_id()) {
    // required string install_id = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_install_id());
  }

  if (_internal_has_public_key()) {
    // required bytes public_key = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key());
  }

  if (_internal_has_global_salt()) {
    // required bytes global_salt = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_global_salt());
  }

  return total_size;
}
size_t ConfigHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:condenccpp.ConfigHeader)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string install_id = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_install_id());

    // required bytes public_key = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key());

    // required bytes global_salt = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_global_salt());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000f8u) {
    // optional .condenccpp.TypoPolicy tp = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tp_);
    }

    // optional int32 period_for_sending_log = 2 [default = 21600];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_period_for_sending_log());
    }

    // optional bool allowed_typo_login = 1 [default = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool expire_typos = 3 [default = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool allow_upload = 5 [default = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional int64 typo_expiry_time = 4 [default = 2592000];
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_typo_expiry_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConfigHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigHeader::GetClassData() const { return &_class_data_; }


void ConfigHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConfigHeader*>(&to_msg);
  auto& from = static_cast<const ConfigHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:condenccpp.ConfigHeader)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_install_id(from._internal_install_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_public_key(from._internal_public_key());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_global_salt(from._internal_global_salt());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_tp()->::condenccpp::TypoPolicy::MergeFrom(
          from._internal_tp());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.period_for_sending_log_ = from._impl_.period_for_sending_log_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.allowed_typo_login_ = from._impl_.allowed_typo_login_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.expire_typos_ = from._impl_.expire_typos_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.allow_upload_ = from._impl_.allow_upload_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_typo_expiry_time(from._internal_typo_expiry_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigHeader::CopyFrom(const ConfigHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:condenccpp.ConfigHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigHeader::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ConfigHeader::InternalSwap(ConfigHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.install_id_, lhs_arena,
      &other->_impl_.install_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.public_key_, lhs_arena,
      &other->_impl_.public_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.global_salt_, lhs_arena,
      &other->_impl_.global_salt_, rhs_arena
  );
  swap(_impl_.tp_, other->_impl_.tp_);
  swap(_impl_.period_for_sending_log_, other->_impl_.period_for_sending_log_);
  swap(_impl_.allowed_typo_login_, other->_impl_.allowed_typo_login_);
  swap(_impl_.expire_typos_, other->_impl_.expire_typos_);
  swap(_impl_.allow_upload_, other->_impl_.allow_upload_);
  swap(_impl_.typo_expiry_time_, other->_impl_.typo_expiry_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[2]);
}

// ===================================================================

class EncHeaderData::_Internal {
 public:
  using HasBits = decltype(std::declval<EncHeaderData>()._impl_._has_bits_);
  static void set_has_pw(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pw_ent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

EncHeaderData::EncHeaderData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:condenccpp.EncHeaderData)
}
EncHeaderData::EncHeaderData(const EncHeaderData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EncHeaderData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.freq_){from._impl_.freq_}
    , decltype(_impl_.last_used_){from._impl_.last_used_}
    , decltype(_impl_.pw_){}
    , decltype(_impl_.pw_ent_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pw_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pw()) {
    _this->_impl_.pw_.Set(from._internal_pw(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.pw_ent_ = from._impl_.pw_ent_;
  // @@protoc_insertion_point(copy_constructor:condenccpp.EncHeaderData)
}

inline void EncHeaderData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.freq_){arena}
    , decltype(_impl_.last_used_){arena}
    , decltype(_impl_.pw_){}
    , decltype(_impl_.pw_ent_){0}
  };
  _impl_.pw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pw_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EncHeaderData::~EncHeaderData() {
  // @@protoc_insertion_point(destructor:condenccpp.EncHeaderData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EncHeaderData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.freq_.~RepeatedField();
  _impl_.last_used_.~RepeatedField();
  _impl_.pw_.Destroy();
}

void EncHeaderData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EncHeaderData::Clear() {
// @@protoc_insertion_point(message_clear_start:condenccpp.EncHeaderData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.freq_.Clear();
  _impl_.last_used_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.pw_.ClearNonDefaultToEmpty();
  }
  _impl_.pw_ent_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EncHeaderData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes pw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pw();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 freq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_freq(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_freq(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 last_used = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_last_used(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_last_used(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float pw_ent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_pw_ent(&has_bits);
          _impl_.pw_ent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EncHeaderData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:condenccpp.EncHeaderData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bytes pw = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pw(), target);
  }

  // repeated int32 freq = 2;
  for (int i = 0, n = this->_internal_freq_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_freq(i), target);
  }

  // repeated int64 last_used = 3;
  for (int i = 0, n = this->_internal_last_used_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_last_used(i), target);
  }

  // required float pw_ent = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_pw_ent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:condenccpp.EncHeaderData)
  return target;
}

size_t EncHeaderData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:condenccpp.EncHeaderData)
  size_t total_size = 0;

  if (_internal_has_pw()) {
    // required bytes pw = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pw());
  }

  if (_internal_has_pw_ent()) {
    // required float pw_ent = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t EncHeaderData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:condenccpp.EncHeaderData)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes pw = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pw());

    // required float pw_ent = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 freq = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.freq_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_freq_size());
    total_size += data_size;
  }

  // repeated int64 last_used = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.last_used_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_last_used_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EncHeaderData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EncHeaderData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EncHeaderData::GetClassData() const { return &_class_data_; }


void EncHeaderData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EncHeaderData*>(&to_msg);
  auto& from = static_cast<const EncHeaderData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:condenccpp.EncHeaderData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.freq_.MergeFrom(from._impl_.freq_);
  _this->_impl_.last_used_.MergeFrom(from._impl_.last_used_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_pw(from._internal_pw());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.pw_ent_ = from._impl_.pw_ent_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EncHeaderData::CopyFrom(const EncHeaderData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:condenccpp.EncHeaderData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncHeaderData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void EncHeaderData::InternalSwap(EncHeaderData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.freq_.InternalSwap(&other->_impl_.freq_);
  _impl_.last_used_.InternalSwap(&other->_impl_.last_used_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pw_, lhs_arena,
      &other->_impl_.pw_, rhs_arena
  );
  swap(_impl_.pw_ent_, other->_impl_.pw_ent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EncHeaderData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[3]);
}

// ===================================================================

class Header::_Internal {
 public:
  using HasBits = decltype(std::declval<Header>()._impl_._has_bits_);
  static void set_has_indexj(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_log_sent_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_login_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sys_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_enc_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:condenccpp.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Header* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.enc_header_){}
    , decltype(_impl_.indexj_){}
    , decltype(_impl_.last_log_sent_time_){}
    , decltype(_impl_.login_count_){}
    , decltype(_impl_.sys_state_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.enc_header_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enc_header_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_enc_header()) {
    _this->_impl_.enc_header_.Set(from._internal_enc_header(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.indexj_, &from._impl_.indexj_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sys_state_) -
    reinterpret_cast<char*>(&_impl_.indexj_)) + sizeof(_impl_.sys_state_));
  // @@protoc_insertion_point(copy_constructor:condenccpp.Header)
}

inline void Header::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.enc_header_){}
    , decltype(_impl_.indexj_){0}
    , decltype(_impl_.last_log_sent_time_){0}
    , decltype(_impl_.login_count_){0}
    , decltype(_impl_.sys_state_){3}
  };
  _impl_.enc_header_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enc_header_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:condenccpp.Header)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.enc_header_.Destroy();
}

void Header::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:condenccpp.Header)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.enc_header_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.indexj_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.login_count_) -
        reinterpret_cast<char*>(&_impl_.indexj_)) + sizeof(_impl_.login_count_));
    _impl_.sys_state_ = 3;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 indexj = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_indexj(&has_bits);
          _impl_.indexj_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 last_log_sent_time = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_last_log_sent_time(&has_bits);
          _impl_.last_log_sent_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 login_count = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_login_count(&has_bits);
          _impl_.login_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .condenccpp.SystemStatus sys_state = 4 [default = UNINITIALIZED];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::condenccpp::SystemStatus_IsValid(val))) {
            _internal_set_sys_state(static_cast<::condenccpp::SystemStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required bytes enc_header = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_enc_header();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Header::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:condenccpp.Header)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 indexj = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_indexj(), target);
  }

  // optional int32 last_log_sent_time = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_last_log_sent_time(), target);
  }

  // optional int32 login_count = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_login_count(), target);
  }

  // optional .condenccpp.SystemStatus sys_state = 4 [default = UNINITIALIZED];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_sys_state(), target);
  }

  // required bytes enc_header = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_enc_header(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:condenccpp.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:condenccpp.Header)
  size_t total_size = 0;

  // required bytes enc_header = 5;
  if (_internal_has_enc_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_enc_header());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional int32 indexj = 1 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_indexj());
    }

    // optional int32 last_log_sent_time = 2 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_last_log_sent_time());
    }

    // optional int32 login_count = 3 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_login_count());
    }

    // optional .condenccpp.SystemStatus sys_state = 4 [default = UNINITIALIZED];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_sys_state());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Header::GetClassData() const { return &_class_data_; }


void Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Header*>(&to_msg);
  auto& from = static_cast<const Header&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:condenccpp.Header)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_enc_header(from._internal_enc_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.indexj_ = from._impl_.indexj_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.last_log_sent_time_ = from._impl_.last_log_sent_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.login_count_ = from._impl_.login_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.sys_state_ = from._impl_.sys_state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:condenccpp.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.enc_header_, lhs_arena,
      &other->_impl_.enc_header_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, _impl_.login_count_)
      + sizeof(Header::_impl_.login_count_)
      - PROTOBUF_FIELD_OFFSET(Header, _impl_.indexj_)>(
          reinterpret_cast<char*>(&_impl_.indexj_),
          reinterpret_cast<char*>(&other->_impl_.indexj_));
  swap(_impl_.sys_state_, other->_impl_.sys_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[4]);
}

// ===================================================================

class Logs::_Internal {
 public:
  using HasBits = decltype(std::declval<Logs>()._impl_._has_bits_);
  static void set_has_typos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_typos_saved(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Logs::Logs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:condenccpp.Logs)
}
Logs::Logs(const Logs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Logs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.l_){from._impl_.l_}
    , decltype(_impl_.typos_){}
    , decltype(_impl_.typos_saved_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.typos_, &from._impl_.typos_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.typos_saved_) -
    reinterpret_cast<char*>(&_impl_.typos_)) + sizeof(_impl_.typos_saved_));
  // @@protoc_insertion_point(copy_constructor:condenccpp.Logs)
}

inline void Logs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.l_){arena}
    , decltype(_impl_.typos_){0}
    , decltype(_impl_.typos_saved_){0}
  };
}

Logs::~Logs() {
  // @@protoc_insertion_point(destructor:condenccpp.Logs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Logs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.l_.~RepeatedPtrField();
}

void Logs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Logs::Clear() {
// @@protoc_insertion_point(message_clear_start:condenccpp.Logs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.l_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.typos_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.typos_saved_) -
        reinterpret_cast<char*>(&_impl_.typos_)) + sizeof(_impl_.typos_saved_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Logs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .condenccpp.Log L = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_l(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 typos = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_typos(&has_bits);
          _impl_.typos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 typos_saved = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_typos_saved(&has_bits);
          _impl_.typos_saved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Logs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:condenccpp.Logs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .condenccpp.Log L = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_l_size()); i < n; i++) {
    const auto& repfield = this->_internal_l(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 typos = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_typos(), target);
  }

  // optional int32 typos_saved = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_typos_saved(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:condenccpp.Logs)
  return target;
}

size_t Logs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:condenccpp.Logs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .condenccpp.Log L = 1;
  total_size += 1UL * this->_internal_l_size();
  for (const auto& msg : this->_impl_.l_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 typos = 2 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_typos());
    }

    // optional int32 typos_saved = 3 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_typos_saved());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Logs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Logs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Logs::GetClassData() const { return &_class_data_; }


void Logs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Logs*>(&to_msg);
  auto& from = static_cast<const Logs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:condenccpp.Logs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.l_.MergeFrom(from._impl_.l_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.typos_ = from._impl_.typos_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.typos_saved_ = from._impl_.typos_saved_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Logs::CopyFrom(const Logs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:condenccpp.Logs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logs::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.l_))
    return false;
  return true;
}

void Logs::InternalSwap(Logs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.l_.InternalSwap(&other->_impl_.l_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Logs, _impl_.typos_saved_)
      + sizeof(Logs::_impl_.typos_saved_)
      - PROTOBUF_FIELD_OFFSET(Logs, _impl_.typos_)>(
          reinterpret_cast<char*>(&_impl_.typos_),
          reinterpret_cast<char*>(&other->_impl_.typos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Logs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[5]);
}

// ===================================================================

class typoDB::_Internal {
 public:
  using HasBits = decltype(std::declval<typoDB>()._impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::condenccpp::ConfigHeader& ch(const typoDB* msg);
  static void set_has_ch(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::condenccpp::Header& h(const typoDB* msg);
  static void set_has_h(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::condenccpp::Logs& logs(const typoDB* msg);
  static void set_has_logs(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rlpwdctxorenc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000d) ^ 0x0000000d) != 0;
  }
};

const ::condenccpp::ConfigHeader&
typoDB::_Internal::ch(const typoDB* msg) {
  return *msg->_impl_.ch_;
}
const ::condenccpp::Header&
typoDB::_Internal::h(const typoDB* msg) {
  return *msg->_impl_.h_;
}
const ::condenccpp::Logs&
typoDB::_Internal::logs(const typoDB* msg) {
  return *msg->_impl_.logs_;
}
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString typoDB::Impl_::_i_give_permission_to_break_this_code_default_version_{{{"1", 1}}, {nullptr}};
typoDB::typoDB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:condenccpp.typoDB)
}
typoDB::typoDB(const typoDB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  typoDB* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.w_){from._impl_.w_}
    , decltype(_impl_.t_){from._impl_.t_}
    , decltype(_impl_.rlpwdctxorenc_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.ch_){nullptr}
    , decltype(_impl_.h_){nullptr}
    , decltype(_impl_.logs_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rlpwdctxorenc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rlpwdctxorenc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rlpwdctxorenc()) {
    _this->_impl_.rlpwdctxorenc_.Set(from._internal_rlpwdctxorenc(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  if (from._internal_has_version()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ch()) {
    _this->_impl_.ch_ = new ::condenccpp::ConfigHeader(*from._impl_.ch_);
  }
  if (from._internal_has_h()) {
    _this->_impl_.h_ = new ::condenccpp::Header(*from._impl_.h_);
  }
  if (from._internal_has_logs()) {
    _this->_impl_.logs_ = new ::condenccpp::Logs(*from._impl_.logs_);
  }
  // @@protoc_insertion_point(copy_constructor:condenccpp.typoDB)
}

inline void typoDB::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.w_){arena}
    , decltype(_impl_.t_){arena}
    , decltype(_impl_.rlpwdctxorenc_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.ch_){nullptr}
    , decltype(_impl_.h_){nullptr}
    , decltype(_impl_.logs_){nullptr}
  };
  _impl_.rlpwdctxorenc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rlpwdctxorenc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
}

typoDB::~typoDB() {
  // @@protoc_insertion_point(destructor:condenccpp.typoDB)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void typoDB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.w_.~RepeatedPtrField();
  _impl_.t_.~RepeatedPtrField();
  _impl_.rlpwdctxorenc_.Destroy();
  _impl_.version_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ch_;
  if (this != internal_default_instance()) delete _impl_.h_;
  if (this != internal_default_instance()) delete _impl_.logs_;
}

void typoDB::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void typoDB::Clear() {
// @@protoc_insertion_point(message_clear_start:condenccpp.typoDB)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.w_.Clear();
  _impl_.t_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.rlpwdctxorenc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.version_.ClearToDefault(::condenccpp::typoDB::Impl_::_i_give_permission_to_break_this_code_default_version_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.ch_ != nullptr);
      _impl_.ch_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.h_ != nullptr);
      _impl_.h_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.logs_ != nullptr);
      _impl_.logs_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* typoDB::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .condenccpp.ConfigHeader CH = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .condenccpp.Header H = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_h(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes W = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_w();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes T = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_t();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .condenccpp.Logs logs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_logs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bytes rlpwdctxorenc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_rlpwdctxorenc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string version = 9 [default = "1"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "condenccpp.typoDB.version");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* typoDB::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:condenccpp.typoDB)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .condenccpp.ConfigHeader CH = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ch(this),
        _Internal::ch(this).GetCachedSize(), target, stream);
  }

  // required .condenccpp.Header H = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::h(this),
        _Internal::h(this).GetCachedSize(), target, stream);
  }

  // repeated bytes W = 3;
  for (int i = 0, n = this->_internal_w_size(); i < n; i++) {
    const auto& s = this->_internal_w(i);
    target = stream->WriteBytes(3, s, target);
  }

  // repeated bytes T = 4;
  for (int i = 0, n = this->_internal_t_size(); i < n; i++) {
    const auto& s = this->_internal_t(i);
    target = stream->WriteBytes(4, s, target);
  }

  // optional .condenccpp.Logs logs = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::logs(this),
        _Internal::logs(this).GetCachedSize(), target, stream);
  }

  // required bytes rlpwdctxorenc = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_rlpwdctxorenc(), target);
  }

  // optional string version = 9 [default = "1"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "condenccpp.typoDB.version");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:condenccpp.typoDB)
  return target;
}

size_t typoDB::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:condenccpp.typoDB)
  size_t total_size = 0;

  if (_internal_has_rlpwdctxorenc()) {
    // required bytes rlpwdctxorenc = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rlpwdctxorenc());
  }

  if (_internal_has_ch()) {
    // required .condenccpp.ConfigHeader CH = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ch_);
  }

  if (_internal_has_h()) {
    // required .condenccpp.Header H = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.h_);
  }

  return total_size;
}
size_t typoDB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:condenccpp.typoDB)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required bytes rlpwdctxorenc = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rlpwdctxorenc());

    // required .condenccpp.ConfigHeader CH = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ch_);

    // required .condenccpp.Header H = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.h_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes W = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.w_.size());
  for (int i = 0, n = _impl_.w_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.w_.Get(i));
  }

  // repeated bytes T = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.t_.size());
  for (int i = 0, n = _impl_.t_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.t_.Get(i));
  }

  // optional string version = 9 [default = "1"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // optional .condenccpp.Logs logs = 5;
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.logs_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData typoDB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    typoDB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*typoDB::GetClassData() const { return &_class_data_; }


void typoDB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<typoDB*>(&to_msg);
  auto& from = static_cast<const typoDB&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:condenccpp.typoDB)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.w_.MergeFrom(from._impl_.w_);
  _this->_impl_.t_.MergeFrom(from._impl_.t_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rlpwdctxorenc(from._internal_rlpwdctxorenc());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_ch()->::condenccpp::ConfigHeader::MergeFrom(
          from._internal_ch());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_h()->::condenccpp::Header::MergeFrom(
          from._internal_h());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_logs()->::condenccpp::Logs::MergeFrom(
          from._internal_logs());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void typoDB::CopyFrom(const typoDB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:condenccpp.typoDB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool typoDB::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_ch()) {
    if (!_impl_.ch_->IsInitialized()) return false;
  }
  if (_internal_has_h()) {
    if (!_impl_.h_->IsInitialized()) return false;
  }
  if (_internal_has_logs()) {
    if (!_impl_.logs_->IsInitialized()) return false;
  }
  return true;
}

void typoDB::InternalSwap(typoDB* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.w_.InternalSwap(&other->_impl_.w_);
  _impl_.t_.InternalSwap(&other->_impl_.t_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rlpwdctxorenc_, lhs_arena,
      &other->_impl_.rlpwdctxorenc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(typoDB, _impl_.logs_)
      + sizeof(typoDB::_impl_.logs_)
      - PROTOBUF_FIELD_OFFSET(typoDB, _impl_.ch_)>(
          reinterpret_cast<char*>(&_impl_.ch_),
          reinterpret_cast<char*>(&other->_impl_.ch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata typoDB::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[6]);
}

// ===================================================================

class WaitlistEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<WaitlistEntry>()._impl_._has_bits_);
  static void set_has_pw(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

WaitlistEntry::WaitlistEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:condenccpp.WaitlistEntry)
}
WaitlistEntry::WaitlistEntry(const WaitlistEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WaitlistEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pw_){}
    , decltype(_impl_.ts_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pw_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pw()) {
    _this->_impl_.pw_.Set(from._internal_pw(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.ts_ = from._impl_.ts_;
  // @@protoc_insertion_point(copy_constructor:condenccpp.WaitlistEntry)
}

inline void WaitlistEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pw_){}
    , decltype(_impl_.ts_){int64_t{-1}}
  };
  _impl_.pw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pw_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WaitlistEntry::~WaitlistEntry() {
  // @@protoc_insertion_point(destructor:condenccpp.WaitlistEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WaitlistEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pw_.Destroy();
}

void WaitlistEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WaitlistEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:condenccpp.WaitlistEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.pw_.ClearNonDefaultToEmpty();
    }
    _impl_.ts_ = int64_t{-1};
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WaitlistEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes pw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pw();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 ts = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ts(&has_bits);
          _impl_.ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WaitlistEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:condenccpp.WaitlistEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bytes pw = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pw(), target);
  }

  // required int64 ts = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:condenccpp.WaitlistEntry)
  return target;
}

size_t WaitlistEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:condenccpp.WaitlistEntry)
  size_t total_size = 0;

  if (_internal_has_pw()) {
    // required bytes pw = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pw());
  }

  if (_internal_has_ts()) {
    // required int64 ts = 2 [default = -1];
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ts());
  }

  return total_size;
}
size_t WaitlistEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:condenccpp.WaitlistEntry)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes pw = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pw());

    // required int64 ts = 2 [default = -1];
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ts());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WaitlistEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WaitlistEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WaitlistEntry::GetClassData() const { return &_class_data_; }


void WaitlistEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WaitlistEntry*>(&to_msg);
  auto& from = static_cast<const WaitlistEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:condenccpp.WaitlistEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_pw(from._internal_pw());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ts_ = from._impl_.ts_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WaitlistEntry::CopyFrom(const WaitlistEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:condenccpp.WaitlistEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitlistEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void WaitlistEntry::InternalSwap(WaitlistEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pw_, lhs_arena,
      &other->_impl_.pw_, rhs_arena
  );
  swap(_impl_.ts_, other->_impl_.ts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WaitlistEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[7]);
}

// ===================================================================

class PwdCtxORPredicate::_Internal {
 public:
  using HasBits = decltype(std::declval<PwdCtxORPredicate>()._impl_._has_bits_);
  static void set_has_rlpwdctx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rlpwdctxorenc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rlpwdctxorcenc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PwdCtxORPredicate::PwdCtxORPredicate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:condenccpp.PwdCtxORPredicate)
}
PwdCtxORPredicate::PwdCtxORPredicate(const PwdCtxORPredicate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PwdCtxORPredicate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rlpwdctx_){}
    , decltype(_impl_.rlpwdctxorenc_){}
    , decltype(_impl_.rlpwdctxorcenc_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rlpwdctx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rlpwdctx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rlpwdctx()) {
    _this->_impl_.rlpwdctx_.Set(from._internal_rlpwdctx(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rlpwdctxorenc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rlpwdctxorenc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rlpwdctxorenc()) {
    _this->_impl_.rlpwdctxorenc_.Set(from._internal_rlpwdctxorenc(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rlpwdctxorcenc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rlpwdctxorcenc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rlpwdctxorcenc()) {
    _this->_impl_.rlpwdctxorcenc_.Set(from._internal_rlpwdctxorcenc(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:condenccpp.PwdCtxORPredicate)
}

inline void PwdCtxORPredicate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rlpwdctx_){}
    , decltype(_impl_.rlpwdctxorenc_){}
    , decltype(_impl_.rlpwdctxorcenc_){}
  };
  _impl_.rlpwdctx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rlpwdctx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rlpwdctxorenc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rlpwdctxorenc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rlpwdctxorcenc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rlpwdctxorcenc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PwdCtxORPredicate::~PwdCtxORPredicate() {
  // @@protoc_insertion_point(destructor:condenccpp.PwdCtxORPredicate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PwdCtxORPredicate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rlpwdctx_.Destroy();
  _impl_.rlpwdctxorenc_.Destroy();
  _impl_.rlpwdctxorcenc_.Destroy();
}

void PwdCtxORPredicate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PwdCtxORPredicate::Clear() {
// @@protoc_insertion_point(message_clear_start:condenccpp.PwdCtxORPredicate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.rlpwdctx_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.rlpwdctxorenc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.rlpwdctxorcenc_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PwdCtxORPredicate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string rlpwdctx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_rlpwdctx();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "condenccpp.PwdCtxORPredicate.rlpwdctx");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string rlpwdctxorenc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_rlpwdctxorenc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "condenccpp.PwdCtxORPredicate.rlpwdctxorenc");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string rlpwdctxorcenc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_rlpwdctxorcenc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "condenccpp.PwdCtxORPredicate.rlpwdctxorcenc");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PwdCtxORPredicate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:condenccpp.PwdCtxORPredicate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string rlpwdctx = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rlpwdctx().data(), static_cast<int>(this->_internal_rlpwdctx().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "condenccpp.PwdCtxORPredicate.rlpwdctx");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rlpwdctx(), target);
  }

  // optional string rlpwdctxorenc = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rlpwdctxorenc().data(), static_cast<int>(this->_internal_rlpwdctxorenc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "condenccpp.PwdCtxORPredicate.rlpwdctxorenc");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_rlpwdctxorenc(), target);
  }

  // optional string rlpwdctxorcenc = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rlpwdctxorcenc().data(), static_cast<int>(this->_internal_rlpwdctxorcenc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "condenccpp.PwdCtxORPredicate.rlpwdctxorcenc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_rlpwdctxorcenc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:condenccpp.PwdCtxORPredicate)
  return target;
}

size_t PwdCtxORPredicate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:condenccpp.PwdCtxORPredicate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string rlpwdctx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rlpwdctx());
    }

    // optional string rlpwdctxorenc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rlpwdctxorenc());
    }

    // optional string rlpwdctxorcenc = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rlpwdctxorcenc());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PwdCtxORPredicate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PwdCtxORPredicate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PwdCtxORPredicate::GetClassData() const { return &_class_data_; }


void PwdCtxORPredicate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PwdCtxORPredicate*>(&to_msg);
  auto& from = static_cast<const PwdCtxORPredicate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:condenccpp.PwdCtxORPredicate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rlpwdctx(from._internal_rlpwdctx());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_rlpwdctxorenc(from._internal_rlpwdctxorenc());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_rlpwdctxorcenc(from._internal_rlpwdctxorcenc());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PwdCtxORPredicate::CopyFrom(const PwdCtxORPredicate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:condenccpp.PwdCtxORPredicate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PwdCtxORPredicate::IsInitialized() const {
  return true;
}

void PwdCtxORPredicate::InternalSwap(PwdCtxORPredicate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rlpwdctx_, lhs_arena,
      &other->_impl_.rlpwdctx_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rlpwdctxorenc_, lhs_arena,
      &other->_impl_.rlpwdctxorenc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rlpwdctxorcenc_, lhs_arena,
      &other->_impl_.rlpwdctxorcenc_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PwdCtxORPredicate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[8]);
}

// ===================================================================

class PaillierPK::_Internal {
 public:
  using HasBits = decltype(std::declval<PaillierPK>()._impl_._has_bits_);
  static void set_has_pail_pk(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pail_sk(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PaillierPK::PaillierPK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:condenccpp.PaillierPK)
}
PaillierPK::PaillierPK(const PaillierPK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PaillierPK* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pail_pk_){}
    , decltype(_impl_.pail_sk_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pail_pk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pail_pk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pail_pk()) {
    _this->_impl_.pail_pk_.Set(from._internal_pail_pk(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pail_sk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pail_sk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pail_sk()) {
    _this->_impl_.pail_sk_.Set(from._internal_pail_sk(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:condenccpp.PaillierPK)
}

inline void PaillierPK::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pail_pk_){}
    , decltype(_impl_.pail_sk_){}
  };
  _impl_.pail_pk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pail_pk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pail_sk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pail_sk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PaillierPK::~PaillierPK() {
  // @@protoc_insertion_point(destructor:condenccpp.PaillierPK)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PaillierPK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pail_pk_.Destroy();
  _impl_.pail_sk_.Destroy();
}

void PaillierPK::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PaillierPK::Clear() {
// @@protoc_insertion_point(message_clear_start:condenccpp.PaillierPK)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.pail_pk_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.pail_sk_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PaillierPK::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes Pail_PK = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pail_pk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes Pail_Sk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pail_sk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PaillierPK::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:condenccpp.PaillierPK)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes Pail_PK = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pail_pk(), target);
  }

  // optional bytes Pail_Sk = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_pail_sk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:condenccpp.PaillierPK)
  return target;
}

size_t PaillierPK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:condenccpp.PaillierPK)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes Pail_PK = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_pail_pk());
    }

    // optional bytes Pail_Sk = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_pail_sk());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PaillierPK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PaillierPK::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PaillierPK::GetClassData() const { return &_class_data_; }


void PaillierPK::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PaillierPK*>(&to_msg);
  auto& from = static_cast<const PaillierPK&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:condenccpp.PaillierPK)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_pail_pk(from._internal_pail_pk());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_pail_sk(from._internal_pail_sk());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PaillierPK::CopyFrom(const PaillierPK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:condenccpp.PaillierPK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaillierPK::IsInitialized() const {
  return true;
}

void PaillierPK::InternalSwap(PaillierPK* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pail_pk_, lhs_arena,
      &other->_impl_.pail_pk_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pail_sk_, lhs_arena,
      &other->_impl_.pail_sk_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PaillierPK::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace condenccpp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::condenccpp::TypoPolicy*
Arena::CreateMaybeMessage< ::condenccpp::TypoPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::condenccpp::TypoPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::condenccpp::Log*
Arena::CreateMaybeMessage< ::condenccpp::Log >(Arena* arena) {
  return Arena::CreateMessageInternal< ::condenccpp::Log >(arena);
}
template<> PROTOBUF_NOINLINE ::condenccpp::ConfigHeader*
Arena::CreateMaybeMessage< ::condenccpp::ConfigHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::condenccpp::ConfigHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::condenccpp::EncHeaderData*
Arena::CreateMaybeMessage< ::condenccpp::EncHeaderData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::condenccpp::EncHeaderData >(arena);
}
template<> PROTOBUF_NOINLINE ::condenccpp::Header*
Arena::CreateMaybeMessage< ::condenccpp::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::condenccpp::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::condenccpp::Logs*
Arena::CreateMaybeMessage< ::condenccpp::Logs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::condenccpp::Logs >(arena);
}
template<> PROTOBUF_NOINLINE ::condenccpp::typoDB*
Arena::CreateMaybeMessage< ::condenccpp::typoDB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::condenccpp::typoDB >(arena);
}
template<> PROTOBUF_NOINLINE ::condenccpp::WaitlistEntry*
Arena::CreateMaybeMessage< ::condenccpp::WaitlistEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::condenccpp::WaitlistEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::condenccpp::PwdCtxORPredicate*
Arena::CreateMaybeMessage< ::condenccpp::PwdCtxORPredicate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::condenccpp::PwdCtxORPredicate >(arena);
}
template<> PROTOBUF_NOINLINE ::condenccpp::PaillierPK*
Arena::CreateMaybeMessage< ::condenccpp::PaillierPK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::condenccpp::PaillierPK >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
